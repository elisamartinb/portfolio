{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.min.js","sourcesContent":["'use strict';\n\n/* ---- particles.js config ---- */\n\n// particlesJS(\"particles-js\", {\n//     \"particles\": {\n//       \"number\": {\n//         \"value\": 50,\n//         \"density\": {\n//           \"enable\": true,\n//           \"value_area\": 800\n//         }\n//       },\n//       \"color\": {\n//         \"value\": \"#212121\"\n//       },\n//       \"shape\": {\n//         \"type\": \"circle\",\n//         \"stroke\": {\n//           \"width\": 0,\n//           \"color\": \"#212121\"\n//         },\n//         \"polygon\": {\n//           \"nb_sides\": 5\n//         },\n//         \"image\": {\n//           \"src\": \"img/github.svg\",\n//           \"width\": 100,\n//           \"height\": 100\n//         }\n//       },\n//       \"opacity\": {\n//         \"value\": 0.5,\n//         \"random\": false,\n//         \"anim\": {\n//           \"enable\": false,\n//           \"speed\": 1,\n//           \"opacity_min\": 0.1,\n//           \"sync\": false\n//         }\n//       },\n//       \"size\": {\n//         \"value\": 3,\n//         \"random\": true,\n//         \"anim\": {\n//           \"enable\": false,\n//           \"speed\": 40,\n//           \"size_min\": 0.1,\n//           \"sync\": false\n//         }\n//       },\n//       \"line_linked\": {\n//         \"enable\": true,\n//         \"distance\": 150,\n//         \"color\": \"#212121\",\n//         \"opacity\": 0.4,\n//         \"width\": 1\n//       },\n//       \"move\": {\n//         \"enable\": true,\n//         \"speed\": 6,\n//         \"direction\": \"none\",\n//         \"random\": false,\n//         \"straight\": false,\n//         \"out_mode\": \"out\",\n//         \"bounce\": false,\n//         \"attract\": {\n//           \"enable\": false,\n//           \"rotateX\": 600,\n//           \"rotateY\": 1200\n//         }\n//       }\n//     },\n//     \"interactivity\": {\n//       \"detect_on\": \"canvas\",\n//       \"events\": {\n//         \"onhover\": {\n//           \"enable\": true,\n//           \"mode\": \"grab\"\n//         },\n//         \"onclick\": {\n//           \"enable\": true,\n//           \"mode\": \"push\"\n//         },\n//         \"resize\": true\n//       },\n//       \"modes\": {\n//         \"grab\": {\n//           \"distance\": 140,\n//           \"line_linked\": {\n//             \"opacity\": 1\n//           }\n//         },\n//         \"bubble\": {\n//           \"distance\": 400,\n//           \"size\": 40,\n//           \"duration\": 2,\n//           \"opacity\": 8,\n//           \"speed\": 3\n//         },\n//         \"repulse\": {\n//           \"distance\": 200,\n//           \"duration\": 0.4\n//         },\n//         \"push\": {\n//           \"particles_nb\": 4\n//         },\n//         \"remove\": {\n//           \"particles_nb\": 2\n//         }\n//       }\n//     },\n//     \"retina_detect\": true\n//   });\n  \n  /* Text decoder */\n  \n  // ——————————————————————————————————————————————————\n  // TextScramble\n  // ——————————————————————————————————————————————————\n  \n  class TextScramble {\n    constructor(el) {\n      this.el = el\n      this.chars = '!<>-_\\\\/[]{}—=+*^?#________'\n      this.update = this.update.bind(this)\n    }\n    setText(newText) {\n      const oldText = this.el.innerText\n      const length = Math.max(oldText.length, newText.length)\n      const promise = new Promise((resolve) => this.resolve = resolve)\n      this.queue = []\n      for (let i = 0; i < length; i++) {\n        const from = oldText[i] || ''\n        const to = newText[i] || ''\n        const start = Math.floor(Math.random() * 40)\n        const end = start + Math.floor(Math.random() * 40)\n        this.queue.push({ from, to, start, end })\n      }\n      cancelAnimationFrame(this.frameRequest)\n      this.frame = 0\n      this.update()\n      return promise\n    }\n    update() {\n      let output = ''\n      let complete = 0\n      for (let i = 0, n = this.queue.length; i < n; i++) {\n        let { from, to, start, end, char } = this.queue[i]\n        if (this.frame >= end) {\n          complete++\n          output += to\n        } else if (this.frame >= start) {\n          if (!char || Math.random() < 0.28) {\n            char = this.randomChar()\n            this.queue[i].char = char\n          }\n          output += `<span class=\"dud\">${char}</span>`\n        } else {\n          output += from\n        }\n      }\n      this.el.innerHTML = output\n      if (complete === this.queue.length) {\n        this.resolve()\n      } else {\n        this.frameRequest = requestAnimationFrame(this.update)\n        this.frame++\n      }\n    }\n    randomChar() {\n      return this.chars[Math.floor(Math.random() * this.chars.length)]\n    }\n  }\n  \n  // ——————————————————————————————————————————————————\n  // Example\n  // ——————————————————————————————————————————————————\n  \n  const phrases = [\n    'Elisa Martin',\n    'Coder',\n    'WebDeveloper',\n    'JavaScript',\n    'React',\n    'Gulp',\n    'CSS3',\n    'HTML5'\n  ]\n  \n  const el = document.querySelector('.text')\n  const fx = new TextScramble(el)\n  let counter = 0\n  const next = () => {\n    fx.setText(phrases[counter]).then(() => {\n      setTimeout(next, 1500)\n    })\n    counter = (counter + 1) % phrases.length\n  }\n  \n  next();\n  \n  /* Scroll to #div */ \n  \n  "]}